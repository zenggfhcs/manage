<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lib.dao.BookInfoMapper">
    <resultMap id="BaseResultMap" type="com.lib.model.BookInfo">
        <id property="bookInfoId" column="book_info_id" jdbcType="INTEGER"/>
        <result property="publishPlace" column="publish_place" jdbcType="VARCHAR"/>
        <result property="isbn" column="isbn" jdbcType="VARCHAR"/>
        <result property="cip" column="cip" jdbcType="VARCHAR"/>
        <result property="bookName" column="book_name" jdbcType="VARCHAR"/>
        <result property="bookType" column="book_type" jdbcType="VARCHAR"/>
        <result property="cover" column="cover" jdbcType="VARCHAR"/>
        <result property="author" column="author" jdbcType="VARCHAR"/>
        <result property="describe" column="describe" jdbcType="VARCHAR"/>
        <result property="publishDate" column="publish_date" jdbcType="DATE"/>
        <result property="keyword" column="keyword" jdbcType="VARCHAR"/>
        <result property="lang" column="lang" jdbcType="VARCHAR"/>
        <result property="price" column="price" jdbcType="DECIMAL"/>
        <result property="stock" column="stock" jdbcType="INTEGER"/>
        <result property="createBy" column="create_by" jdbcType="INTEGER"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateBy" column="update_by" jdbcType="INTEGER"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="revision" column="revision" jdbcType="INTEGER"/>
        <association property="publisher" column="{id=publish_id}" javaType="com.lib.model.Publisher"
                     select="com.lib.dao.PublisherMapper.getById"/>
    </resultMap>
    <insert id="create" parameterType="com.lib.model.Parameter" useGeneratedKeys="true" keyColumn="bookInfo.bookInfoId">
        insert into book_info (publish_id, publish_place, isbn, cip, book_name, book_type, cover, author,
                               `describe`, publish_date, keyword, lang, price, stock, create_by, create_time, update_by,
                               update_time, revision)
        VALUES ( #{bookInfo.publishId}, #{bookInfo.publishPlace}, #{bookInfo.isbn}, #{bookInfo.cip}
               , #{bookInfo.bookName}
               , #{bookInfo.bookType}, #{bookInfo.cover}, #{bookInfo.author}, #{bookInfo.describe}
               , #{bookInfo.publishDate}
               , #{bookInfo.keyword}, #{bookInfo.lang}, #{bookInfo.price}, #{bookInfo.stock}, #{bookInfo.createBy}
               , NOW()
               , #{bookInfo.updateBy}, now(), #{bookInfo.vevision})
    </insert>
    <update id="update" parameterType="com.lib.model.Parameter">
        update book_info
        <set>
            <if test="bookInfo.publishId != null">
                `publish_id` = #{bookInfo.publishId},
            </if>
            <if test="bookInfo.publishPlace != null and bookInfo.publishPlace != ''">
                `publish_place` = #{bookInfo.publishPlace},
            </if>
            <if test="bookInfo.isbn != null and bookInfo.isbn != ''">
                `isbn` = #{bookInfo.isbn},
            </if>
            <if test="bookInfo.cip != null and bookInfo.cip != ''">
                `cip` = #{bookInfo.cip},
            </if>
            <if test="bookInfo.bookName != null and bookInfo.bookName != ''">
                `book_name` = #{bookInfo.bookName},
            </if>
            <if test="bookInfo.bookType != null and bookInfo.bookType != ''">
                `book_type` = #{bookInfo.bookType},
            </if>
            <if test="bookInfo.cover != null and bookInfo.cover != ''">
                `cover` = #{bookInfo.cover},
            </if>
            <if test="bookInfo.author != null and bookInfo.author != ''">
                `author` = #{bookInfo.author},
            </if>
            <if test="bookInfo.publishDate != null">
                `publish_date` = #{bookInfo.publishDate},
            </if>
            <if test="bookInfo.keyword != null and bookInfo.keyword != ''">
                `keyword` = #{bookInfo.keyword},
            </if>
            <if test="bookInfo.lang != null and bookInfo.lang != ''">
                `lang` = #{bookInfo.lang},
            </if>
            <if test="bookInfo.price != null">
                `price` = #{bookInfo.price},
            </if>
            <if test="bookInfo.stock != null">
                `stock` = #{bookInfo.stock},
            </if>
            <if test="bookInfo.updateBy != null">
                `update_by` = #{bookInfo.updateBy},
            </if>
            <if test="1 == 1">
                `update_time` = NOW(),
            </if>
            <if test="bookInfo.describe != null">
                `describe` = #{bookInfo.describe},
            </if>
            <if test="bookInfo.revision != null">
                `revision` = #{bookInfo.revision},
            </if>
        </set>
        where `book_info_id` = #{id}
    </update>
    <delete id="delete" parameterType="com.lib.model.Parameter">
        delete from book_info
        where book_info_id = #{id}
    </delete>
    <select id="getBy" resultMap="BaseResultMap" parameterType="com.lib.model.Parameter">
        select distinct bif.`book_info_id`,
                        bif.`publish_id`,
                        bif.`publish_place`,
                        bif.`isbn`,
                        bif.`cip`,
                        bif.`book_name`,
                        bif.`book_type`,
                        bif.`cover`,
                        bif.`author`,
                        bif.`describe`,
                        bif.`publish_date`,
                        bif.`keyword`,
                        bif.`lang`,
                        bif.`price`,
                        bif.`stock`,
                        bif.`create_by`,
                        bif.`create_time`,
                        bif.`update_by`,
                        bif.`update_time`,
                        bif.`revision`
        from book_info bif
        <where>

        </where>
    </select>
    <select id="getById" resultMap="BaseResultMap" parameterType="com.lib.model.Parameter">
        select distinct bif.`book_info_id`,
                        bif.`publish_id`,
                        bif.`publish_place`,
                        bif.`isbn`,
                        bif.`cip`,
                        bif.`book_name`,
                        bif.`book_type`,
                        bif.`cover`,
                        bif.`author`,
                        bif.`describe`,
                        bif.`publish_date`,
                        bif.`keyword`,
                        bif.`lang`,
                        bif.`price`,
                        bif.`stock`,
                        bif.`create_by`,
                        bif.`create_time`,
                        bif.`update_by`,
                        bif.`update_time`,
                        bif.`revision`
        from book_info bif
        where bif.`book_info_id` = #{id}
    </select>
</mapper>