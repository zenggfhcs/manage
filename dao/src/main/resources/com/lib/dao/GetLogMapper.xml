<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lib.dao.GetLogMapper">
    <resultMap id="BaseResultMap" type="com.lib.model.GetLog">
        <id property="logId" column="log_id" jdbcType="BIGINT"/>
        <result property="method" column="method" jdbcType="VARCHAR"/>
        <result property="className" column="class_name" jdbcType="VARCHAR"/>
        <result property="parameter" column="parameter" jdbcType="VARCHAR"/>
        <result property="returnValue" column="return_value" jdbcType="VARCHAR"/>
        <result property="elapsedTime" column="elapsed_time" jdbcType="BIGINT"/>
        <result property="runTime" column="run_time" jdbcType="TIMESTAMP"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="createBy" column="create_by" jdbcType="INTEGER"/>
    </resultMap>
    <insert id="create" useGeneratedKeys="true" keyProperty="gLog.logId" keyColumn="log_id"
            parameterType="com.lib.model.Parameter">
        insert into get_log(method, class_name, parameter, return_value, elapsed_time, run_time, create_time, create_by)
        values (#{gLog.method}, #{gLog.className}, #{gLog.parameter}, #{gLog.returnValue}, #{gLog.elapsedTime},
                #{gLog.runTime}, now(), #{gLog.createBy})
    </insert>
    <update id="update" parameterType="com.lib.model.Parameter">
        update get_log
        <set>
            <if test="gLog.returnValue != null and gLog.returnValue != ''">
                return_value = #{gLog.returnValue},
            </if>
            <if test="gLog.elapsedTime != null">
                elapsed_time = #{gLog.elapsedTime},
            </if>
        </set>
        where log_id = #{gLog.logId}
    </update>
    <delete id="delete" parameterType="com.lib.model.Parameter">
        delete from get_log
        where log_id = #{id}
    </delete>
    <select id="getBy" resultMap="BaseResultMap" parameterType="com.lib.model.Parameter">
        select
        l.log_id,
        l.class_name,
        l.method,
        l.parameter,
        l.return_value,
        l.elapsed_time,
        l.run_time,
        l.create_time,
        l.create_by
        from get_log l
        <where>
            <if test="gLog.logId != null">
                l.log_id = #{gLog.logId}
            </if>
            <if test="gLog.logId == null">
                <if test="gLog.createBy != null">
                    l.create_by = #{gLog.createBy}
                </if>
                <if test="gLog.method != null and gLog.method != ''">
                    and l.method = #{gLog.method}
                </if>
                <if test="1 == 1">
                    and l.elapsed_time between #{minElapsedTime} and #{maxElapsedTime}
                    and l.run_time between #{minRunTime} and #{maxRunTime}
                </if>
            </if>
        </where>
        limit #{pageStart}, #{pageSize}
    </select>
    <select id="getById" resultMap="BaseResultMap" parameterType="com.lib.model.Parameter">
        select l.`log_id`,
               l.`class_name`,
               l.`method`,
               l.`parameter`,
               l.`return_value`,
               l.`elapsed_time`,
               l.`run_time`,
               l.`create_time`,
               l.`create_by`
        from get_log l
        where l.`log_id` = #{id}
    </select>

</mapper>